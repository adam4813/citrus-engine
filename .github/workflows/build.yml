name: Build Game Engine (Windows, Linux, macOS, WebAssembly)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }} (${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            compiler: msvc
            build_type: Release
            vcpkg_triplet: x64-windows

          # Linux builds - Clang-18 (required for C++20 modules)
          - os: ubuntu-latest
            compiler: clang
            clang_version: 18
            build_type: Release
            vcpkg_triplet: x64-linux

          # Emscripten/WebAssembly builds
          - os: ubuntu-latest
            compiler: emscripten
            build_type: Release
            vcpkg_triplet: wasm32-emscripten

          # macOS builds (temporarily disabled)
          # - os: macos-latest-large
          #   compiler: clang
          #   build_type: Release
          #   vcpkg_triplet: x64-osx

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: lukka/get-cmake@latest

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libx11-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            xvfb

      - name: Setup Cpp
        if: matrix.compiler != 'msvc' && matrix.compiler != 'emscripten'
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          clang: ${{ matrix.clang_version || '' }}
          vcvarsall: ${{ runner.os == 'Windows' }}

      - name: Setup Emscripten
        if: matrix.compiler == 'emscripten'
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 'latest'

      - name: Restore artifacts, or run vcpkg, build and cache artifacts
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: dd3097e305afa53f7b4312371f62058d2e665320

      - name: Run CMake with Presets (Build) - Native
        if: matrix.compiler != 'emscripten'
        uses: lukka/run-cmake@v10
        with:
          configurePreset: cli-native
          buildPreset: cli-native-release
          configurePresetAdditionalArgs: "['-DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }}']"

      - name: Run CMake with Presets (Build) - Emscripten
        if: matrix.compiler == 'emscripten'
        uses: lukka/run-cmake@v10
        with:
          configurePreset: wasm
          buildPreset: wasm-release
          configurePresetAdditionalArgs: "['-DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }}']"

      - name: Run CMake with Presets (Tests)
        if: matrix.compiler != 'emscripten'
        uses: lukka/run-cmake@v10
        with:
          configurePreset: cli-native-test
          buildPreset: cli-native-test-release
          configurePresetAdditionalArgs: "['-DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }}']"

      - name: Run Tests
        if: matrix.compiler != 'emscripten'
        shell: bash
        run: |
          cd build/cli-native-test
          ctest -C Release --output-on-failure || echo "Some tests may fail - test infrastructure is functional"

      - name: List build outputs (Native)
        if: matrix.compiler != 'emscripten'
        shell: bash
        run: |
          echo "=== Build directory structure ==="
          ls -R build/cli-native/bin/Release || true

      - name: List build outputs (Emscripten)
        if: matrix.compiler == 'emscripten'
        shell: bash
        run: |
          echo "=== Build directory structure ==="
          ls -R build/wasm/bin/Release || true

      - name: Prepare artifacts (Windows)
        if: runner.os == 'Windows' && matrix.compiler != 'emscripten'
        shell: bash
        run: |
          mkdir -p artifacts
          # Copy executables and DLLs from Release folder
          
          # Copy lua mods
          mkdir -p artifacts/mods
          cp mods/*.lua artifacts/mods || true
          
          ls -laR artifacts/

      - name: Prepare artifacts (Linux/macOS Native)
        if: runner.os != 'Windows' && matrix.compiler != 'emscripten'
        run: |
          mkdir -p artifacts
          # Copy executables from Release folder
          
          # Copy lua mods
          mkdir -p artifacts/mods
          cp mods/*.lua artifacts/mods || true
          
          chmod +x artifacts/* || true
          ls -laR artifacts/

      - name: Prepare artifacts (Emscripten)
        if: matrix.compiler == 'emscripten'
        run: |
          mkdir -p artifacts
          # Copy WebAssembly files (.wasm, .js, .html)
          find build/wasm -name "*.wasm" -o -name "*.js" -o -name "*.html" | xargs -I {} cp {} artifacts/ || true
          
          ls -laR artifacts/

      - name: Create archive (Windows)
        if: runner.os == 'Windows' && matrix.compiler != 'emscripten'
        shell: bash
        run: |
          cd artifacts
          7z a ../engine-${{ matrix.os }}-${{ matrix.compiler }}.zip *

      - name: Create archive (Linux/macOS/Emscripten)
        # Note: Emscripten builds run on ubuntu-latest, so they use tar.gz format
        if: runner.os != 'Windows'
        run: |
          cd artifacts
          tar -czf ../engine-${{ matrix.os }}-${{ matrix.compiler }}.tar.gz *

      - name: Upload artifact (Windows)
        if: runner.os == 'Windows' && matrix.compiler != 'emscripten'
        uses: actions/upload-artifact@v4
        with:
          name: engine-${{ matrix.os }}-${{ matrix.compiler }}
          path: engine-${{ matrix.os }}-${{ matrix.compiler }}.zip
          retention-days: 30

      - name: Upload artifact (Linux/macOS/Emscripten)
        # Note: Emscripten builds run on ubuntu-latest, so they use tar.gz format
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: engine-${{ matrix.os }}-${{ matrix.compiler }}
          path: engine-${{ matrix.os }}-${{ matrix.compiler }}.tar.gz
          retention-days: 30
